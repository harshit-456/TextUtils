{"version":3,"sources":["components/About.js","components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","myStyle","setStyle","btntext","setBtntext","classNameName","style","className","id","type","onClick","Navbar","props","mode","to","title","Link","aboutText","toggleMode","role","htmlfor","TextForm","text","setText","heading","value","onChange","event","console","log","target","rows","newtext","toUpperCase","showAlert","toLowerCase","words","split","length","word","Alert","alert","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.3a2f0029.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle,setStyle]=useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n      });\r\n   \r\n      const[ btntext,setBtntext]=useState('Enable Dark Mode')\r\n  const onDark=()=>\r\n  {\r\n      if(myStyle.color==='white')\r\n      {\r\n      let newstyle={\r\n        color:'black',\r\n        backgroundColor:'white'\r\n        \r\n      }\r\n      setBtntext(\"Enable light mode\");\r\nsetStyle(newstyle);\r\n    }\r\n    else\r\n    {\r\n        let newstyle={\r\n            color:'white',\r\n            backgroundColor:'black'\r\n          }\r\n          setBtntext(\"Enable dark mode\");\r\n    setStyle(newstyle);\r\n\r\n    }\r\n  }\r\n    return (\r\n        <>\r\n\r\n        <div classNameName='container' style={myStyle}>\r\n            <h1 classNameName=\"my-2\"> About us</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={myStyle} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={myStyle} aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\"style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div classNameName=\"container my-3\"></div>\r\n<button classNameName=\"btn btn-dnger\" onClick={onDark}>{btntext}</button>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nexport default function Navbar( props) {\r\n    return (\r\n        <div>\r\n           <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n        </li>\r\n      \r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\"  htmlfor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useState } from 'react' ;\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpclick=()=>{\r\n        console.log(\"Uppercase was clicked\");\r\n        let newtext=text.toUpperCase();\r\n        props.showAlert(\"Converted to Upper case\",\"success\");\r\n        setText(newtext);\r\n    }\r\n    const handleLoclick=()=>{\r\n        let newtext=text.toLowerCase();\r\n        setText(newtext);\r\n        props.showAlert(\"Converted to Lower case\",\"success\");\r\n    }\r\n    const word=()=>{\r\n        let words=text.split(\" \");\r\n        console.log(words);\r\n        if(words.length===1&&words[0]==='')\r\n        return 0;\r\n        else\r\n        return words.length;\r\n    }\r\n//    function words()\r\n//    {\r\n//         let words=text.split(\" \");\r\n//         console.log(words);\r\n//         if(words.length===1&&words[0]==='')\r\n//         return 0;\r\n//         else\r\n//         return words.length;\r\n//     }\r\n    const handleonChange=(event)=>{\r\nconsole.log(\"On change\");\r\nsetText(event.target.value);\r\n\r\n    }\r\n    const handleClearclick=(event)=>{\r\n        let newtext='';\r\n        setText(newtext);\r\n        props.showAlert(\"Text cleared\",\"success\");\r\n    }\r\n    const [text,setText]=useState('');\r\n\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color:props.mode==='light'?'black':'white'}}>\r\n        <h1>\r\n            {props.heading}\r\n            </h1>\r\n    \r\n    \r\n\r\n<div className=\"mb-3\" style={{color:props.mode==='light'?'black':'white'}}>\r\n  <textarea className=\"form-control\"  value={text} onChange ={handleonChange} style={{backgroundColor:props.mode==='light'?'white':'grey'}} id=\"myBox\" rows=\"8\"></textarea>\r\n</div>\r\n\r\n<button className=\"btn btn primary mx-2  bg-red\" onClick={handleUpclick} > Convert to Upper case </button>\r\n<button className=\"btn btn primary mx-2\" onClick={handleLoclick} > Convert to Lower case </button>\r\n<button className=\"btn btn primary\" onClick={handleClearclick} > Clear text </button>\r\n</div>\r\n<div className=\"container\" my-3='true' style={{color:props.mode==='light'?'black':'white'}}>\r\n    <h1>\r\n        Your text summary\r\n    </h1>\r\n    //note here writing () after (word) is necessary to invoke it immediately\r\n    <p>  {(word\r\n )()\r\n } words  and {text.length} characters\r\n    </p>\r\n    <p> {0.008*text.split(\" \").length} read time in minutes</p>\r\n    <h2>Preview</h2>\r\n    <p>{text}</p>\r\n</div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert&& <div>\r\n        <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\" >\r\n      <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n  \r\n</div>\r\n        </div>\r\n    )\r\n}\r\n","\r\nimport './App.css';\r\nimport { useState } from 'react';\r\nimport About from './components/About';\r\nimport Navbar from './components/Navbar';\r\nimport TextForm from './components/TextForm';\r\nimport Alert from './components/Alert';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nfunction App() {\r\n  const[mode,setMode]=useState('light');//whether dark mode is enabled or not\r\n  const[alert,setAlert]=useState(null);\r\n  const showAlert=(message,type)=>{\r\n    setAlert({\r\n      msg:message,\r\n      type:type\r\n    })\r\n    setTimeout(()=>{setAlert(null);} \r\n    ,3000 );\r\n  }\r\n  const toggleMode=()=>{\r\nif(mode==='light'){\r\n    setMode('dark');\r\n    document.body.style.backgroundColor='grey';\r\n    showAlert(\"Dark mode has been enabled\",\"success\");\r\n    document.title(\"TextUtilis Dark Mode\");\r\n}\r\n    else{\r\n    setMode('light');\r\n    document.body.style.backgroundColor='white';\r\n    showAlert(\"Light mode has been enabled\",\"success\");\r\n    document.title(\"TextUtilis Light Mode\");\r\n    }\r\n\r\n  }\r\n  return (\r\n    <>\r\n\r\n<Router>\r\n  <Navbar title=\"TextUtils Blog\" aboutText=\"About Us\" mode={mode} toggleMode={toggleMode}/>\r\n  <Alert alert={alert}\r\n/>\r\n  <div className=\"container\" my-3=\"true\">\r\n  <Switch>\r\n          <Route exact path=\"/about\">\r\n            <About />\r\n          </Route>\r\n      \r\n          <Route exact path=\"/\">\r\n                   \r\n  <TextForm  heading=\"Enter the Text To Analyse\" mode={mode} showAlert={showAlert}></TextForm>\r\n          </Route>\r\n        </Switch>\r\n          \r\n  </div>\r\n </Router>\r\n\r\n   </> \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}